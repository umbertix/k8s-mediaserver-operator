{{- if .Values.qbittorrent.enabled -}}
---
## INIT-CONTAINER
apiVersion: v1
data:
  categories.json: |
    {
        "Movies": {
            "save_path": "/movies"
        },
        "TV": {
            "save_path": "/tv"
        }
    }
  init-qbittorrent.sh: |
    #!/bin/bash
    echo "### Initializing categories ###"
    if [ ! -f /qbittorrent-config/categories.json ]; then
      cp -n /init-qbittorrent/categories.json /qbittorrent-config/categories.json
      echo "### No configuration found, intialized with default settings ###"
    fi
kind: ConfigMap
metadata:
  name: init-qbittorrent-cm
---
### CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: qbittorrent-config
data:
  PGID: "{{ .Values.general.pgid }}"
  PUID: "{{ .Values.general.puid }}"
---
### DEPLOYMENT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qbittorrent
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      {{- include "k8s-mediaserver.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "k8s-mediaserver.selectorLabels" . | nindent 8 }}
        app: qbittorrent
    spec:
      initContainers:
        - name: config-qbittorrent
          image: docker.io/ubuntu:groovy
          command: ["/init-qbittorrent/init-qbittorrent.sh"]
          volumeMounts:
            - mountPath: /init-qbittorrent
              name: init-files-qbittorrent
          {{- if .Values.qbittorrent.volume }}
            - name: {{ .Values.qbittorrent.volume.name }}
              mountPath: /qbittorrent-config
          {{- else }}
            - name: mediaserver-volume
              mountPath: /qbittorrent-config
              subPath: "{{ .Values.general.storage.subPaths.config }}/qBittorrent"
          {{- end }}
          securityContext:
            runAsUser: {{ .Values.general.puid }}
            runAsGroup: {{ .Values.general.pgid }}
      containers:
        - name: {{ .Chart.Name }}
          envFrom:
            - configMapRef:
                name: qbittorrent-config
          image: "{{ .Values.qbittorrent.container.image }}:{{ .Values.qbittorrent.container.tag | default .Values.general.image_tag }}"
          imagePullPolicy: Always
          ports:
            - name: qbit
              containerPort: {{ .Values.qbittorrent.container.port.webui }}
              protocol: TCP
            - name: qbit-tcp
              containerPort: {{ .Values.qbittorrent.container.port.tcp }}
              protocol: TCP
            - name: qbit-udp
              containerPort: {{ .Values.qbittorrent.container.port.udp }}
              protocol: UDP
          volumeMounts:
          {{ if .Values.qbittorrent.volume }}
            - name: {{ .Values.qbittorrent.volume.name }}
              mountPath: /config
          {{ else }}
            - name: mediaserver-volume
              mountPath: "/config"
              subPath: "{{ .Values.general.storage.subPaths.config }}/qbittorrent"
          {{ end }}
            - name: mediaserver-volume
              mountPath: "/downloads"
              subPath: "{{ .Values.general.storage.subPaths.downloads }}"
            - name: mediaserver-volume
              mountPath: /movies
              subPath: "{{ .Values.general.storage.subPaths.movies }}"
            - name: mediaserver-volume
              mountPath: /tv
              subPath: "{{ .Values.general.storage.subPaths.tv }}"
          {{- with .Values.qbittorrent.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        {{ if not .Values.general.storage.customVolume }}
        - name: mediaserver-volume
          persistentVolumeClaim:
            claimName: {{ .Values.general.storage.pvcName }}
        {{ else }}
        - name: mediaserver-volume
          {{- toYaml .Values.general.storage.volumes | nindent 10 }}
        {{ end }}
        {{ if .Values.qbittorrent.volume }}
        - name: {{ .Values.qbittorrent.volume.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.qbittorrent.volume.name }}
        {{ end }}
        - name: init-files-qbittorrent
          configMap:
            defaultMode: 493
            name: init-qbittorrent-cm
      {{- with merge .Values.qbittorrent.container.nodeSelector .Values.general.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if eq .Values.general.podDistribution "cluster" }}
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
            weight: 100
      {{- else if eq .Values.general.podDistribution "spread" }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: "ScheduleAnyway"
        labelSelector:
          matchLabels:
            app.kubernetes.io/instance: {{ .Release.Name }}
      {{- end }}
---
### SERVICES
apiVersion: v1
kind: Service
metadata:
  name: qbittorrent
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  type: {{ .Values.qbittorrent.service.webui.type }}
  ports:
    - port: {{ .Values.qbittorrent.service.webui.port }}
      targetPort: {{ .Values.qbittorrent.container.port.webui }}
      protocol: TCP
      name: qbit
{{ if eq .Values.qbittorrent.service.webui.type "NodePort" }}
      nodePort: {{ .Values.qbittorrent.service.webui.nodePort }}
{{ end }}
  selector:
    app: qbittorrent
---
apiVersion: v1
kind: Service
metadata:
  name: qbit-tcp
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  type: {{ .Values.qbittorrent.service.tcp.type }}
  ports:
    - port: {{ .Values.qbittorrent.service.tcp.port }}
      targetPort: {{ .Values.qbittorrent.container.port.tcp }}
      protocol: TCP
      name: qbit-tcp
{{ if eq .Values.qbittorrent.service.tcp.type "NodePort" }}
      nodePort: {{ .Values.qbittorrent.service.tcp.nodePort }}
{{ end }}
  selector:
    app: qbittorrent
---
apiVersion: v1
kind: Service
metadata:
  name: qbit-udp
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  type: {{ .Values.qbittorrent.service.udp.type }}
  ports:
    - port: {{ .Values.qbittorrent.service.udp.port }}
      targetPort: {{ .Values.qbittorrent.container.port.udp }}
      protocol: UDP
      name: qbit-udp
{{ if eq .Values.qbittorrent.service.udp.type "NodePort" }}
      nodePort: {{ .Values.qbittorrent.service.udp.nodePortUDP }}
{{ end }}
  selector:
    app: qbittorrent
---
{{ if .Values.qbittorrent.service.udp.extraLBService }}
apiVersion: v1
kind: Service
metadata:
  name: qbittorrent-lb
  {{- with .Values.qbittorrent.service.udp.extraLBAnnotations }}
  annotations:
    {{- . | toYaml | nindent 4 }}
  {{- end }}
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  type: LoadBalancer
  ports:
    - port: {{ .Values.qbittorrent.service.udp.port }}
      targetPort: {{ .Values.qbittorrent.container.port.udp }}
      protocol: TCP
      name: qbittorrent-port
  selector:
    app: qbittorrent
---
{{ end }}
{{ if .Values.qbittorrent.service.tcp.extraLBService }}
apiVersion: v1
kind: Service
metadata:
  name: qbittorrent-lb-peer-tcp
  {{- with .Values.qbittorrent.service.tcp.extraLBAnnotations }}
  annotations:
    {{- . | toYaml | nindent 4 }}
  {{- end }}
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  type: LoadBalancer
  ports:
    - port: {{ .Values.qbittorrent.service.tcp.port }}
      targetPort: {{ .Values.qbittorrent.container.port.tcp }}
      protocol: TCP
      name: qbit-tcp
  selector:
    app: qbittorrent
---
apiVersion: v1
kind: Service
metadata:
  name: qbittorrent-lb-peer-udp
  {{- with .Values.qbittorrent.service.udp.extraLBAnnotations }}
  annotations:
    {{- . | toYaml | nindent 4 }}
  {{- end }}
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  type: LoadBalancer
  ports:
    - port: {{ .Values.qbittorrent.service.udp.port }}
      targetPort: {{ .Values.qbittorrent.container.port.udp }}
      protocol: UDP
      name: qbit-udp
  selector:
    app: qbittorrent
{{ end }}
---
### INGRESS
{{ if .Values.qbittorrent.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: qbittorrent
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
  {{- with .Values.qbittorrent.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
{{- if .Values.qbittorrent.ingress.tls.enabled }}
  tls:
    - hosts:
        - {{ .Values.general.qbittorrent_ingress_host | quote }}
      secretName: {{ .Values.qbittorrent.ingress.tls.secretName }}
{{ end }}
  ingressClassName: {{ .Values.general.ingress.ingressClassName }}
  rules:
    - host: {{ .Values.general.qbittorrent_ingress_host | quote }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: qbittorrent
                port:
                  number: {{ .Values.qbittorrent.service.webui.port }}
{{ end }}
{{ end }}
